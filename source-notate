#!/usr/bin/env python3

# MIT License
#
# Copyright (c) 2019 Meyers Tom
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import argparse
import os

DEFAULT_COPYRIGHT_LOCATION="copyright.txt" # location of the copyright file containing your copyright
DEFAULT_DIRECTORY=["."] # default array of files/directories to scan
EXCLUDE_DIRS=[".git"]

def parser():
    """
    Configuration for argparse module
    """
    parser = argparse.ArgumentParser(description='Append copyright to source code.')
    parser.add_argument('source', metavar='N', nargs='*',
                    help='list of directories and files', default=DEFAULT_DIRECTORY)
    parser.add_argument('-c', default=DEFAULT_COPYRIGHT_LOCATION, help='Location of the copyright file')

    args = parser.parse_args()
    return args


def convertPathToFiles(path):
    """
    Find all files contained in a directory.
    If the path is a file it simply returns the file
    """
    if os.path.isfile(path):
        return path, True
    arr = []
    for root, dirs, files in os.walk(path):
        dirs[:] = [d for d in dirs if d not in EXCLUDE_DIRS]
        for f in files:
            arr.append(root + "/" + f)
    return arr, False


def unique(arr):
    unique_list = []

    for item in arr:
        if item not in unique_list:
            unique_list.append(item)
    return unique_list

def findFiles(array):
    """
    Resolves all paths in an array to all file contained in that path
    eg it get an array containing direcotries/files and converts it to an array of all files in those directories
    """
    arr = []
    for path in array:
        item, isFile = convertPathToFiles(path)
        if isFile:
            arr.append(item)
        else:
            for obj in item:
                arr.append(obj)
    return unique(arr)

class LanguageBuilder:
    """
    Detect the language based on the file type
    We build the appropriate file handler to correctly set the copyright
    """
    def __init__(self, path, copyright):
        self.path = path
        self.copyright = copyright

    def detect(self):
        filename, file_extension = os.path.splitext(self.path)
        e = file_extension
        if e == ".py" or e == ".sh":
            return ShellLike(self.path, self.copyright) 
        if e == ".js" or e == ".ts" or e == ".c" or  e == ".cpp" or e == ".class" or e == ".java" or e == ".h" or e == ".cs":
            return CLike(self.path, self.copyright)
        return Blank(self.path, self.copyright)

def readCopyright(filename):
    with open(filename) as f:
            lines = f.read().splitlines()
    return lines

def prefixLines(prefix, lines):
    arr = []
    for line in lines:
        arr.append("{}{}".format(prefix, line))
    return arr

def getShebang(content):

    if len(content) > 2 and  content[0] == "#" and content[1] == "!":
        content = content.split("\n")
        rest = ""
        for item in content[1:]:
            rest+="{}\n".format(item)
        return content[0] + "\n", rest
    rest = "".join(content[0:])
    return "", rest

class ShellLike:
    """
    Find the location to insert the data
    And converts the data to python comments
    Initialize this class on a per file basis
    """
    def __init__(self, path, copyright):
        self.path = path
        self.copyright = copyright

    def insert(self):
        print("inserting into file {}".format(self.path))
        copyright = prefixLines("# ", self.copyright)
        with open(self.path, 'r+') as f:
            content = f.read()
            shebang, content = getShebang(content)
            f.seek(0, 0)
            f.write(shebang + "\n")
            for line in copyright:
                f.write(line.rstrip('\r\n') + '\n')
            f.write(content)
class CLike:
    """
    Class that handles all file types based on the C syntax
    """
    def __init__(self, path, copyright):
        self.path = path
        self.copyright = copyright

    def insert(self):
        print("inserting into file {}".format(self.path))
        copyright = prefixLines(" *  ", self.copyright)
        with open(self.path, 'r+') as f:
            content = f.read()
            f.seek(0, 0)
            f.write("/*\n")
            for line in copyright:
                f.write(line.rstrip('\r\n') + '\n')
            f.write("*/\n\n")
            f.write(content)

class Blank:
    """
    Class that handles all file types that are not recognized by this tool
    It simply prints the filetype to stdout and does nothing more
    """
    def __init__(self, path, copyright):
        self.path = path
        self.copyright = copyright

    def insert(self):
        print("Could not determine code. Ommitting {}".format(self.path))


if __name__ == "__main__":
        arg = parser()
        # convert the copyright file into a list of lines
        copyright = readCopyright(arg.c)
        # convert all directories to an array of files
        files = findFiles(arg.source)
        
        for item in files:
            builder = LanguageBuilder(item, copyright)        
            fileHandler = builder.detect()
            fileHandler.insert()

